<?php

/**
 * These are hooks for other modules to fix their functionality for
 * dual-language editing
 */
module_load_include('inc', 'dual_language_editor', 'dual_language_editor.polyfills');

/**
 * Implements hook_form_alter().
 */
function dual_language_editor_form_alter(&$form, &$form_state, $id) {
  // Trigger another alter for the DLE forms in particular.
  // This lets us alter them using polyfills without having to change the
  // implementation of form_alter for the original module.
  if ($id == 'dual_language_editor_entity_form') {
    $type = $form['entity_raw_type']['#value'];
    foreach (module_implements('dual_language_editor_alter_' . $type . '_form') as $module) {
      $function = $module . '_dual_language_editor_alter_' . $type . '_form';
      if (function_exists($function)) {
        $function($form, $form_state);
      }
    }
  }
}

/**
 * Implements hook_entity_crud_ui_postsave().
 */
function dual_language_editor_entity_crud_ui_postsave($entity_type, &$entity) {
  // We refire the hook so that dual-language overrides can be applied.
  foreach (module_implements('dual_language_editor_postsave') as $module) {
    $function = $module . '_dual_language_editor_postsave';
    if (function_exists($function)) {
      $function($entity_type, $entity);
    }
  }
}

/**
 * Implements hook_menu().
 */
function dual_language_editor_menu() {
  return array(
    'admin/config/content/dual-language' => array(
      'title' => 'Dual-Language Editor',
      'description' => 'Configure how the dual-language editor works',
      'access arguments' => array('dle admin'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dual_language_editor_config_form'),
      'file' => 'dual_language_editor.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function dual_language_editor_permission() {
  return array(
    'dle access' => array(
      'title' => t('Use the dual-language editor'),
      'description' => t('Allows the user to use the dual-language editor.'),
    ),
    'dle admin' => array(
      'title' => t('Configure the dual-language editor'),
      'description' =>
        t('Allows the user to administer the dual-language editor.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 *
 */
function dual_language_editor_menu_alter(&$menu) {

  /* Override add page with dual-language version. */
  $menu['entity/%entity_crud_ui_type/%entity_crud_ui_bundle/add']
    ['page callback'] = 'dual_language_editor_add_form_router';
  $menu['entity/%entity_crud_ui_type/%entity_crud_ui_bundle/add']
    ['file'] = 'dual_language_editor.pages.inc';
  $menu['entity/%entity_crud_ui_type/%entity_crud_ui_bundle/add']
    ['module'] = 'dual_language_editor';

  /* Override edit page with dual-language version. */
  $menu['entity/%entity_crud_ui_type/%entity_crud_ui_id/edit']
    ['page callback'] = 'dual_language_editor_form_router';
  $menu['entity/%entity_crud_ui_type/%entity_crud_ui_id/edit']
    ['file'] = 'dual_language_editor.pages.inc';
  $menu['entity/%entity_crud_ui_type/%entity_crud_ui_id/edit']
    ['module'] = 'dual_language_editor';
}

/**
 * Determines whether the dual-language editor or the default entity UI should
 * be used for creating an entity.
 *
 * @param EntityCRUDUIBase $entity_type The CRUD handler for the entity type.
 * @param string $bundle_type The bundle type for the entity we are adding.
 * @return array A form render array.
 */
function dual_language_editor_add_form_router($entity_type, $bundle_type) {
  if (dual_language_editor_check($entity_type)) {
    module_load_include('inc', 'dual_language_editor',
      'dual_language_editor.pages');
    return dual_language_editor_create_entity($entity_type, $bundle_type);
  } else {
    module_load_include('inc', 'entity_crud_ui', 'entity_crud_ui.pages');
    // use the default Entity CRUD UI callback to create the entity.
    return entity_crud_ui_create_entity($entity_type, $bundle_type);
  }
}

/**
 * Determines whether the dual-language editor or the default entity UI should
 * be used for editing an entity.
 *
 * @param string $form_id The original form ID, as specified in Entity CRUD UI.
 * @param EntityCRUDUIBase $entity_type The CRUD handler for the entity type.
 * @param stdClass $entity The entity we are editing.
 * @return array A form render array.
 */
function dual_language_editor_form_router($form_id, $entity_type, $entity) {
  if (dual_language_editor_check($entity_type, $entity)) {
    $form_id = 'dual_language_editor_entity_form';
    module_load_include('inc', 'dual_language_editor',
      'dual_language_editor.pages');
  }
  return drupal_get_form($form_id, $entity_type, $entity);
}

/**
 * Checks to see if dual-language is available for a given entity type.
 *
 * @param EntityCRUDUIBase $entity_type The CRUD handler for the entity type.
 * @param stdClass $entity The entity we are editing, or NULL if we are adding
 *   a new entity.
 * @return boolean TRUE if the dual-language editor should be used, otherwise
 *   FALSE.
 */
function dual_language_editor_check($entity_type, $entity = NULL) {
  // we only have dual-language editing if there are 2 or more languages.
  $languages = language_list();
  if (count($languages) < 2) {
    return FALSE;
  }
  // we only have the DLE if the user has permissions for it.
  if (!user_access('dle access')) {
    return FALSE;
  }

  // we only have the DLE if entity_translation is present (for now)
  if (!module_exists('entity_translation')) {
    return FALSE;
  }

  // finally, we only have DLE if entity translation is enabled.
  if (!entity_translation_enabled($entity_type->getType())) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Returns the default primary language.
 *
 * The primary language is used as the default language for the left-hand side
 * of the form.
 *
 * @return string A valid two-letter ISO language code.
 */
function dual_language_editor_default_primary_language() {
  $lang = variable_get('dual_language_editor_plang', NULL);
  if (empty($lang)) {
    $lang = language_default('language');
  }
  return $lang;
}

/**
 * Returns the default secondary language.
 *
 * The secondary language is used as the default language for the right-hand
 * side of the form.
 *
 * @return string
 */
function dual_language_editor_default_secondary_language() {
  $lang = variable_get('dual_language_editor_slang', NULL);
  if (empty($lang)) {
    $plang = dual_language_editor_default_primary_language();
    $languages = language_list();
    foreach (array_keys($languages) as $code) {
      if ($code != $plang) {
        $lang = $code;
        break;
      }
    }
  }
  return $lang;
}

/**
 * Callback function for handling AJAX calls to change the language.
 */
function dual_language_editor_reload_language($form, &$form_state) {
  return $form['language_dep'];
}
